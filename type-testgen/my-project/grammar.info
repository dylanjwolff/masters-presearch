-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from grammar.y
-----------------------------------------------------------------------------

state 17 contains 5 shift/reduce conflicts.
state 25 contains 5 shift/reduce conflicts.
state 27 contains 5 shift/reduce conflicts.

terminal class_decl is unused
terminal type_decl is unused
terminal data_decl is unused
terminal '=' is unused
terminal where is unused
terminal '|' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> FDecl                             (0)
	FDecl -> fname '::' TypeExp                        (1)
	FDecl -> fname '::' TypeExp '=>' TypeExp           (2)
	FDecl -> '(' FDecl ')'                             (3)
	TypeExp -> name                                    (4)
	TypeExp -> type                                    (5)
	TypeExp -> '*'                                     (6)
	TypeExp -> TypeExp ',' TypeExp                     (7)
	TypeExp -> TypeExp '->' TypeExp                    (8)
	TypeExp -> '[' TypeExp ']'                         (9)
	TypeExp -> '(' TypeExp ')'                         (10)
	TypeExp -> TypeExp TypeExp                         (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'::'           { TokenColons }
	'->'           { TokenArrow }
	'=>'           { TokenBigArrow }
	type           { TokenType $$ }
	class_decl     { TokenClassMeta }
	type_decl      { TokenTypeMeta }
	data_decl      { TokenDataMeta }
	'='            { TokenEquals }
	where          { TokenWhere }
	'|'            { TokenOr }
	'['            { TokenOSB }
	']'            { TokenCSB }
	'('            { TokenOB }
	')'            { TokenCB }
	'*'            { TokenAny }
	name           { TokenName $$ }
	fname          { TokenFName $$ }
	','            { TokenComma }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	FDecl           rules 1, 2, 3
	TypeExp         rules 4, 5, 6, 7, 8, 9, 10, 11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 4
	fname          shift, and enter state 5

	FDecl          goto state 3

State 1


	fname          shift, and enter state 2


State 2

	FDecl -> fname . '::' TypeExp                       (rule 1)

	'::'           shift, and enter state 8


State 3

	%start_parser -> FDecl .                            (rule 0)

	%eof           accept


State 4

	FDecl -> '(' . FDecl ')'                            (rule 3)

	'('            shift, and enter state 4
	fname          shift, and enter state 5

	FDecl          goto state 7

State 5

	FDecl -> fname . '::' TypeExp                       (rule 1)
	FDecl -> fname . '::' TypeExp '=>' TypeExp          (rule 2)

	'::'           shift, and enter state 6


State 6

	FDecl -> fname '::' . TypeExp                       (rule 1)
	FDecl -> fname '::' . TypeExp '=>' TypeExp          (rule 2)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 16

State 7

	FDecl -> '(' FDecl . ')'                            (rule 3)

	')'            shift, and enter state 15


State 8

	FDecl -> fname '::' . TypeExp                       (rule 1)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 9

State 9

	FDecl -> fname '::' TypeExp .                       (rule 1)
	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> TypeExp . TypeExp                        (rule 11)

	'->'           shift, and enter state 18
	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 20

	TypeExp        goto state 17

State 10

	TypeExp -> type .                                   (rule 5)

	'->'           reduce using rule 5
	'=>'           reduce using rule 5
	type           reduce using rule 5
	'['            reduce using rule 5
	']'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	name           reduce using rule 5
	','            reduce using rule 5
	%eof           reduce using rule 5


State 11

	TypeExp -> '[' . TypeExp ']'                        (rule 9)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 22

State 12

	TypeExp -> '(' . TypeExp ')'                        (rule 10)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 21

State 13

	TypeExp -> '*' .                                    (rule 6)

	'->'           reduce using rule 6
	'=>'           reduce using rule 6
	type           reduce using rule 6
	'['            reduce using rule 6
	']'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'*'            reduce using rule 6
	name           reduce using rule 6
	','            reduce using rule 6
	%eof           reduce using rule 6


State 14

	TypeExp -> name .                                   (rule 4)

	'->'           reduce using rule 4
	'=>'           reduce using rule 4
	type           reduce using rule 4
	'['            reduce using rule 4
	']'            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'*'            reduce using rule 4
	name           reduce using rule 4
	','            reduce using rule 4
	%eof           reduce using rule 4


State 15

	FDecl -> '(' FDecl ')' .                            (rule 3)

	')'            reduce using rule 3
	%eof           reduce using rule 3


State 16

	FDecl -> fname '::' TypeExp .                       (rule 1)
	FDecl -> fname '::' TypeExp . '=>' TypeExp          (rule 2)
	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> TypeExp . TypeExp                        (rule 11)

	'->'           shift, and enter state 18
	'=>'           shift, and enter state 19
	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	')'            reduce using rule 1
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 20
	%eof           reduce using rule 1

	TypeExp        goto state 17

State 17

	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> TypeExp . TypeExp                        (rule 11)
	TypeExp -> TypeExp TypeExp .                        (rule 11)

	'->'           reduce using rule 11
	'=>'           reduce using rule 11
	type           shift, and enter state 10
			(reduce using rule 11)

	'['            shift, and enter state 11
			(reduce using rule 11)

	']'            reduce using rule 11
	'('            shift, and enter state 12
			(reduce using rule 11)

	')'            reduce using rule 11
	'*'            shift, and enter state 13
			(reduce using rule 11)

	name           shift, and enter state 14
			(reduce using rule 11)

	','            reduce using rule 11
	%eof           reduce using rule 11

	TypeExp        goto state 17

State 18

	TypeExp -> TypeExp '->' . TypeExp                   (rule 8)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 27

State 19

	FDecl -> fname '::' TypeExp '=>' . TypeExp          (rule 2)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 26

State 20

	TypeExp -> TypeExp ',' . TypeExp                    (rule 7)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 25

State 21

	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> '(' TypeExp . ')'                        (rule 10)
	TypeExp -> TypeExp . TypeExp                        (rule 11)

	'->'           shift, and enter state 18
	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	')'            shift, and enter state 24
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 20

	TypeExp        goto state 17

State 22

	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> '[' TypeExp . ']'                        (rule 9)
	TypeExp -> TypeExp . TypeExp                        (rule 11)

	'->'           shift, and enter state 18
	type           shift, and enter state 10
	'['            shift, and enter state 11
	']'            shift, and enter state 23
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 20

	TypeExp        goto state 17

State 23

	TypeExp -> '[' TypeExp ']' .                        (rule 9)

	'->'           reduce using rule 9
	'=>'           reduce using rule 9
	type           reduce using rule 9
	'['            reduce using rule 9
	']'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	name           reduce using rule 9
	','            reduce using rule 9
	%eof           reduce using rule 9


State 24

	TypeExp -> '(' TypeExp ')' .                        (rule 10)

	'->'           reduce using rule 10
	'=>'           reduce using rule 10
	type           reduce using rule 10
	'['            reduce using rule 10
	']'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	name           reduce using rule 10
	','            reduce using rule 10
	%eof           reduce using rule 10


State 25

	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp ',' TypeExp .                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> TypeExp . TypeExp                        (rule 11)

	'->'           reduce using rule 7
	'=>'           reduce using rule 7
	type           shift, and enter state 10
			(reduce using rule 7)

	'['            shift, and enter state 11
			(reduce using rule 7)

	']'            reduce using rule 7
	'('            shift, and enter state 12
			(reduce using rule 7)

	')'            reduce using rule 7
	'*'            shift, and enter state 13
			(reduce using rule 7)

	name           shift, and enter state 14
			(reduce using rule 7)

	','            reduce using rule 7
	%eof           reduce using rule 7

	TypeExp        goto state 17

State 26

	FDecl -> fname '::' TypeExp '=>' TypeExp .          (rule 2)
	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> TypeExp . TypeExp                        (rule 11)

	'->'           shift, and enter state 18
	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	')'            reduce using rule 2
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 20
	%eof           reduce using rule 2

	TypeExp        goto state 17

State 27

	TypeExp -> TypeExp . ',' TypeExp                    (rule 7)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 8)
	TypeExp -> TypeExp '->' TypeExp .                   (rule 8)
	TypeExp -> TypeExp . TypeExp                        (rule 11)

	'->'           reduce using rule 8
	'=>'           reduce using rule 8
	type           shift, and enter state 10
			(reduce using rule 8)

	'['            shift, and enter state 11
			(reduce using rule 8)

	']'            reduce using rule 8
	'('            shift, and enter state 12
			(reduce using rule 8)

	')'            reduce using rule 8
	'*'            shift, and enter state 13
			(reduce using rule 8)

	name           shift, and enter state 14
			(reduce using rule 8)

	','            shift, and enter state 20
	%eof           reduce using rule 8

	TypeExp        goto state 17

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 18
Number of non-terminals: 3
Number of states: 28

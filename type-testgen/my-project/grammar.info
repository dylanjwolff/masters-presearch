-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from grammar.y
-----------------------------------------------------------------------------

state 19 contains 1 shift/reduce conflicts.
state 22 contains 5 shift/reduce conflicts.
state 27 contains 5 shift/reduce conflicts.
state 30 contains 5 shift/reduce conflicts.
state 34 contains 1 shift/reduce conflicts.

terminal type_decl is unused
terminal data_decl is unused
terminal '=' is unused
terminal '|' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Decl                              (0)
	Decl -> FDecls                                     (1)
	Decl -> CDecl                                      (2)
	CDecl -> class_decl TypeExp where FDecls           (3)
	CDecl -> class_decl TypeExp '=>' TypeExp where FDecls   (4)
	FDecl -> fname '::' TypeExp                        (5)
	FDecl -> fname '::' TypeExp '=>' TypeExp           (6)
	FDecl -> '(' FDecl ')'                             (7)
	FDecls -> FDecl                                    (8)
	FDecls -> FDecls FDecl                             (9)
	TypeExp -> name                                    (10)
	TypeExp -> type                                    (11)
	TypeExp -> '*'                                     (12)
	TypeExp -> TypeExp ',' TypeExp                     (13)
	TypeExp -> TypeExp '->' TypeExp                    (14)
	TypeExp -> '[' TypeExp ']'                         (15)
	TypeExp -> '(' TypeExp ')'                         (16)
	TypeExp -> TypeExp TypeExp                         (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'::'           { TokenColons }
	'->'           { TokenArrow }
	'=>'           { TokenBigArrow }
	type           { TokenType $$ }
	class_decl     { TokenClassMeta }
	type_decl      { TokenTypeMeta }
	data_decl      { TokenDataMeta }
	'='            { TokenEquals }
	where          { TokenWhere }
	'|'            { TokenOr }
	'['            { TokenOSB }
	']'            { TokenCSB }
	'('            { TokenOB }
	')'            { TokenCB }
	'*'            { TokenAny }
	name           { TokenName $$ }
	fname          { TokenFName $$ }
	','            { TokenComma }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Decl            rules 1, 2
	CDecl           rules 3, 4
	FDecl           rules 5, 6, 7
	FDecls          rules 8, 9
	TypeExp         rules 10, 11, 12, 13, 14, 15, 16, 17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	class_decl     shift, and enter state 8
	'('            shift, and enter state 4
	fname          shift, and enter state 5

	Decl           goto state 6
	CDecl          goto state 7
	FDecl          goto state 2
	FDecls         goto state 3

State 1


	'('            shift, and enter state 4
	fname          shift, and enter state 5

	FDecl          goto state 2
	FDecls         goto state 3

State 2

	FDecls -> FDecl .                                   (rule 8)

	'('            reduce using rule 8
	fname          reduce using rule 8
	%eof           reduce using rule 8


State 3

	Decl -> FDecls .                                    (rule 1)
	FDecls -> FDecls . FDecl                            (rule 9)

	'('            shift, and enter state 4
	fname          shift, and enter state 5
	%eof           reduce using rule 1

	FDecl          goto state 17

State 4

	FDecl -> '(' . FDecl ')'                            (rule 7)

	'('            shift, and enter state 4
	fname          shift, and enter state 5

	FDecl          goto state 16

State 5

	FDecl -> fname . '::' TypeExp                       (rule 5)
	FDecl -> fname . '::' TypeExp '=>' TypeExp          (rule 6)

	'::'           shift, and enter state 15


State 6

	%start_parser -> Decl .                             (rule 0)

	%eof           accept


State 7

	Decl -> CDecl .                                     (rule 2)

	%eof           reduce using rule 2


State 8

	CDecl -> class_decl . TypeExp where FDecls          (rule 3)
	CDecl -> class_decl . TypeExp '=>' TypeExp where FDecls    (rule 4)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 9

State 9

	CDecl -> class_decl TypeExp . where FDecls          (rule 3)
	CDecl -> class_decl TypeExp . '=>' TypeExp where FDecls    (rule 4)
	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           shift, and enter state 23
	'=>'           shift, and enter state 24
	type           shift, and enter state 10
	where          shift, and enter state 25
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 26

	TypeExp        goto state 22

State 10

	TypeExp -> type .                                   (rule 11)

	'->'           reduce using rule 11
	'=>'           reduce using rule 11
	type           reduce using rule 11
	where          reduce using rule 11
	'['            reduce using rule 11
	']'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	name           reduce using rule 11
	fname          reduce using rule 11
	','            reduce using rule 11
	%eof           reduce using rule 11


State 11

	TypeExp -> '[' . TypeExp ']'                        (rule 15)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 21

State 12

	TypeExp -> '(' . TypeExp ')'                        (rule 16)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 20

State 13

	TypeExp -> '*' .                                    (rule 12)

	'->'           reduce using rule 12
	'=>'           reduce using rule 12
	type           reduce using rule 12
	where          reduce using rule 12
	'['            reduce using rule 12
	']'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	name           reduce using rule 12
	fname          reduce using rule 12
	','            reduce using rule 12
	%eof           reduce using rule 12


State 14

	TypeExp -> name .                                   (rule 10)

	'->'           reduce using rule 10
	'=>'           reduce using rule 10
	type           reduce using rule 10
	where          reduce using rule 10
	'['            reduce using rule 10
	']'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	name           reduce using rule 10
	fname          reduce using rule 10
	','            reduce using rule 10
	%eof           reduce using rule 10


State 15

	FDecl -> fname '::' . TypeExp                       (rule 5)
	FDecl -> fname '::' . TypeExp '=>' TypeExp          (rule 6)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 19

State 16

	FDecl -> '(' FDecl . ')'                            (rule 7)

	')'            shift, and enter state 18


State 17

	FDecls -> FDecls FDecl .                            (rule 9)

	'('            reduce using rule 9
	fname          reduce using rule 9
	%eof           reduce using rule 9


State 18

	FDecl -> '(' FDecl ')' .                            (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	fname          reduce using rule 7
	%eof           reduce using rule 7


State 19

	FDecl -> fname '::' TypeExp .                       (rule 5)
	FDecl -> fname '::' TypeExp . '=>' TypeExp          (rule 6)
	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           shift, and enter state 23
	'=>'           shift, and enter state 33
	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
			(reduce using rule 5)

	')'            reduce using rule 5
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	fname          reduce using rule 5
	','            shift, and enter state 26
	%eof           reduce using rule 5

	TypeExp        goto state 22

State 20

	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> '(' TypeExp . ')'                        (rule 16)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           shift, and enter state 23
	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	')'            shift, and enter state 32
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 26

	TypeExp        goto state 22

State 21

	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> '[' TypeExp . ']'                        (rule 15)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           shift, and enter state 23
	type           shift, and enter state 10
	'['            shift, and enter state 11
	']'            shift, and enter state 31
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 26

	TypeExp        goto state 22

State 22

	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> TypeExp . TypeExp                        (rule 17)
	TypeExp -> TypeExp TypeExp .                        (rule 17)

	'->'           reduce using rule 17
	'=>'           reduce using rule 17
	type           shift, and enter state 10
			(reduce using rule 17)

	where          reduce using rule 17
	'['            shift, and enter state 11
			(reduce using rule 17)

	']'            reduce using rule 17
	'('            shift, and enter state 12
			(reduce using rule 17)

	')'            reduce using rule 17
	'*'            shift, and enter state 13
			(reduce using rule 17)

	name           shift, and enter state 14
			(reduce using rule 17)

	fname          reduce using rule 17
	','            reduce using rule 17
	%eof           reduce using rule 17

	TypeExp        goto state 22

State 23

	TypeExp -> TypeExp '->' . TypeExp                   (rule 14)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 30

State 24

	CDecl -> class_decl TypeExp '=>' . TypeExp where FDecls    (rule 4)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 29

State 25

	CDecl -> class_decl TypeExp where . FDecls          (rule 3)

	'('            shift, and enter state 4
	fname          shift, and enter state 5

	FDecl          goto state 2
	FDecls         goto state 28

State 26

	TypeExp -> TypeExp ',' . TypeExp                    (rule 13)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 27

State 27

	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp ',' TypeExp .                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           reduce using rule 13
	'=>'           reduce using rule 13
	type           shift, and enter state 10
			(reduce using rule 13)

	where          reduce using rule 13
	'['            shift, and enter state 11
			(reduce using rule 13)

	']'            reduce using rule 13
	'('            shift, and enter state 12
			(reduce using rule 13)

	')'            reduce using rule 13
	'*'            shift, and enter state 13
			(reduce using rule 13)

	name           shift, and enter state 14
			(reduce using rule 13)

	fname          reduce using rule 13
	','            reduce using rule 13
	%eof           reduce using rule 13

	TypeExp        goto state 22

State 28

	CDecl -> class_decl TypeExp where FDecls .          (rule 3)
	FDecls -> FDecls . FDecl                            (rule 9)

	'('            shift, and enter state 4
	fname          shift, and enter state 5
	%eof           reduce using rule 3

	FDecl          goto state 17

State 29

	CDecl -> class_decl TypeExp '=>' TypeExp . where FDecls    (rule 4)
	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           shift, and enter state 23
	type           shift, and enter state 10
	where          shift, and enter state 35
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	','            shift, and enter state 26

	TypeExp        goto state 22

State 30

	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> TypeExp '->' TypeExp .                   (rule 14)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           reduce using rule 14
	'=>'           reduce using rule 14
	type           shift, and enter state 10
			(reduce using rule 14)

	where          reduce using rule 14
	'['            shift, and enter state 11
			(reduce using rule 14)

	']'            reduce using rule 14
	'('            shift, and enter state 12
			(reduce using rule 14)

	')'            reduce using rule 14
	'*'            shift, and enter state 13
			(reduce using rule 14)

	name           shift, and enter state 14
			(reduce using rule 14)

	fname          reduce using rule 14
	','            shift, and enter state 26
	%eof           reduce using rule 14

	TypeExp        goto state 22

State 31

	TypeExp -> '[' TypeExp ']' .                        (rule 15)

	'->'           reduce using rule 15
	'=>'           reduce using rule 15
	type           reduce using rule 15
	where          reduce using rule 15
	'['            reduce using rule 15
	']'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'*'            reduce using rule 15
	name           reduce using rule 15
	fname          reduce using rule 15
	','            reduce using rule 15
	%eof           reduce using rule 15


State 32

	TypeExp -> '(' TypeExp ')' .                        (rule 16)

	'->'           reduce using rule 16
	'=>'           reduce using rule 16
	type           reduce using rule 16
	where          reduce using rule 16
	'['            reduce using rule 16
	']'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'*'            reduce using rule 16
	name           reduce using rule 16
	fname          reduce using rule 16
	','            reduce using rule 16
	%eof           reduce using rule 16


State 33

	FDecl -> fname '::' TypeExp '=>' . TypeExp          (rule 6)

	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
	'*'            shift, and enter state 13
	name           shift, and enter state 14

	TypeExp        goto state 34

State 34

	FDecl -> fname '::' TypeExp '=>' TypeExp .          (rule 6)
	TypeExp -> TypeExp . ',' TypeExp                    (rule 13)
	TypeExp -> TypeExp . '->' TypeExp                   (rule 14)
	TypeExp -> TypeExp . TypeExp                        (rule 17)

	'->'           shift, and enter state 23
	type           shift, and enter state 10
	'['            shift, and enter state 11
	'('            shift, and enter state 12
			(reduce using rule 6)

	')'            reduce using rule 6
	'*'            shift, and enter state 13
	name           shift, and enter state 14
	fname          reduce using rule 6
	','            shift, and enter state 26
	%eof           reduce using rule 6

	TypeExp        goto state 22

State 35

	CDecl -> class_decl TypeExp '=>' TypeExp where . FDecls    (rule 4)

	'('            shift, and enter state 4
	fname          shift, and enter state 5

	FDecl          goto state 2
	FDecls         goto state 36

State 36

	CDecl -> class_decl TypeExp '=>' TypeExp where FDecls .    (rule 4)
	FDecls -> FDecls . FDecl                            (rule 9)

	'('            shift, and enter state 4
	fname          shift, and enter state 5
	%eof           reduce using rule 4

	FDecl          goto state 17

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 18
Number of non-terminals: 6
Number of states: 37
